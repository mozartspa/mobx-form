(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[693],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return s},kt:function(){return c}});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=i.createContext({}),m=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},s=function(e){var n=m(e.components);return i.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=m(t),c=o,f=d["".concat(p,".").concat(c)]||d[c]||u[c]||a;return t?i.createElement(f,r(r({ref:n},s),{},{components:t})):i.createElement(f,r({ref:n},s))}));function c(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var m=2;m<a;m++)r[m]=t[m];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9075:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m},default:function(){return u}});var i=t(2122),o=t(9756),a=(t(7294),t(3905)),r=["components"],l={sidebar_position:1},p={unversionedId:"getting-started/create-form",id:"getting-started/create-form",isDocsHomePage:!1,title:"Create a Form",description:"Let's start with a minimal example, then we'll iterate over it in order to arrive to a final concrete example. In this way, we have the chance to understand how each piece connects to each other.",source:"@site/docs/getting-started/create-form.md",sourceDirName:"getting-started",slug:"/getting-started/create-form",permalink:"/mobx-form/docs/getting-started/create-form",editUrl:"https://github.com/mozartspa/mobx-form/edit/master/website/docs/getting-started/create-form.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/mobx-form/docs/intro"},next:{title:"Nested and array fields",permalink:"/mobx-form/docs/getting-started/nested-array-fields"}},m=[{value:"Minimal example",id:"minimal-example",children:[]},{value:"<code>&lt;Form /&gt;</code> component",id:"form--component",children:[]},{value:"<code>&lt;Field /&gt;</code> component",id:"field--component",children:[]},{value:"Custom Input component",id:"custom-input-component",children:[{value:"Using <code>useField</code>",id:"using-usefield",children:[]},{value:"Using <code>splitFieldProps</code>",id:"using-splitfieldprops",children:[]}]},{value:"Debugging the state of the form instance",id:"debugging-the-state-of-the-form-instance",children:[]}],s={toc:m};function u(e){var n=e.components,t=(0,o.Z)(e,r);return(0,a.kt)("wrapper",(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Let's start with a minimal example, then we'll iterate over it in order to arrive to a final concrete example. In this way, we have the chance to understand how each piece connects to each other."),(0,a.kt)("h2",{id:"minimal-example"},"Minimal example"),(0,a.kt)("p",null,"Not exactly what you would use in a real project, but it gives an overall look:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import React from "react"\nimport { observer } from "mobx-react-lite"\nimport { useField, useForm } from "@mozartspa/mobx-form"\n\nconst App = observer(() => {\n  const form = useForm({\n    initialValues: {\n      name: "",\n    },\n    onSubmit: (values) => {\n      console.log("submitted values", values)\n    },\n  })\n\n  const nameField = useField("name", { form })\n\n  return (\n    <form onSubmit={form.handleSubmit}>\n      <div>\n        <label>Name</label>\n        <input type="text" {...nameField.input} />\n        {nameField.isTouched && nameField.error}\n      </div>\n      <button type="submit">Submit</button>\n    </form>\n  )\n})\n\nexport default App\n')),(0,a.kt)("p",null,"Few things to note:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We import ",(0,a.kt)("inlineCode",{parentName:"li"},"useForm")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"useField")," from the package ",(0,a.kt)("inlineCode",{parentName:"li"},"@mozartspa/mobx-form"),"."),(0,a.kt)("li",{parentName:"ul"},"We wrap our component with ",(0,a.kt)("a",{parentName:"li",href:"https://mobx.js.org/react-integration.html"},(0,a.kt)("inlineCode",{parentName:"a"},"observer()")),", since we're using MobX."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"useForm()")," gives us back a stable reference to our form instance."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"useField()")," gives us back a reference to a specific field of our form. We pass it the ",(0,a.kt)("inlineCode",{parentName:"li"},"form")," instance, to make it know which form it should be bound to. It's required here, but in other examples we'll leverage the React Context."),(0,a.kt)("li",{parentName:"ul"},"With ",(0,a.kt)("inlineCode",{parentName:"li"},"onSubmit={form.handleSubmit}")," we let our form instance handle the onSubmit event."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{...nameField.input}")," gives the input the necessary props to be a controlled input: ",(0,a.kt)("inlineCode",{parentName:"li"},"name"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"value"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"onChange"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"onBlur"),"."),(0,a.kt)("li",{parentName:"ul"},"With ",(0,a.kt)("inlineCode",{parentName:"li"},"{nameField.isTouched && nameField.error}")," we display the possible error only after the user ",(0,a.kt)("em",{parentName:"li"},"touched")," the input. Anyway, in this case there's no input validation.")),(0,a.kt)("h2",{id:"form--component"},(0,a.kt)("inlineCode",{parentName:"h2"},"<Form />")," component"),(0,a.kt)("p",null,"In the previous example we did not use any fancy component, just only HTML. It's a great thing, but we can do better using the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Form />")," component provided by ",(0,a.kt)("inlineCode",{parentName:"p"},"useForm()"),". Let's see how it looks:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"{17,20,27}","{17,20,27}":!0},'import React from "react"\nimport { observer } from "mobx-react-lite"\nimport { useField, useForm } from "@mozartspa/mobx-form"\n\nconst App = observer(() => {\n  const form = useForm({\n    initialValues: {\n      name: "",\n    },\n    onSubmit: (values) => {\n      console.log("submitted values", values)\n    },\n  })\n\n  const nameField = useField("name", { form })\n\n  const { Form } = form\n\n  return (\n    <Form>\n      <div>\n        <label>Name</label>\n        <input type="text" {...nameField.input} />\n        {nameField.isTouched && nameField.error}\n      </div>\n      <button type="submit">Submit</button>\n    </Form>\n  )\n})\n\nexport default App\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"<Form />")," component:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"is already bound to our ",(0,a.kt)("inlineCode",{parentName:"li"},"form")," instance (after all, it's the ",(0,a.kt)("inlineCode",{parentName:"li"},"form")," instance that gives it to us);"),(0,a.kt)("li",{parentName:"ul"},"handles ",(0,a.kt)("inlineCode",{parentName:"li"},"onSubmit")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"onReset")," events automatically;"),(0,a.kt)("li",{parentName:"ul"},"creates a React Context (FormContext) that children can use.")),(0,a.kt)("p",null,"Note: the ",(0,a.kt)("inlineCode",{parentName:"p"},"Form")," component is exposed by our ",(0,a.kt)("inlineCode",{parentName:"p"},"form")," instance, we're not importing it."),(0,a.kt)("h2",{id:"field--component"},(0,a.kt)("inlineCode",{parentName:"h2"},"<Field />")," component"),(0,a.kt)("p",null,"In this case we have just one field, but thinking a more complex form we should go with many ",(0,a.kt)("inlineCode",{parentName:"p"},"useField")," hooks. To make things easier, we can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Field />")," component, exposed by the library. Let's use it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"{3,19-27}","{3,19-27}":!0},'import React from "react"\nimport { observer } from "mobx-react-lite"\nimport { Field, useForm } from "@mozartspa/mobx-form"\n\nconst App = observer(() => {\n  const form = useForm({\n    initialValues: {\n      name: "",\n    },\n    onSubmit: (values) => {\n      console.log("submitted values", values)\n    },\n  })\n\n  const { Form } = form\n\n  return (\n    <Form>\n      <Field name="name">\n        {(field) => (\n          <div>\n            <label>Name</label>\n            <input type="text" {...field.input} />\n            {field.isTouched && field.error}\n          </div>\n        )}\n      </Field>\n      <button type="submit">Submit</button>\n    </Form>\n  )\n})\n\nexport default App\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"<Field />")," component:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"is a thin wrapper around ",(0,a.kt)("inlineCode",{parentName:"li"},"useField"),";"),(0,a.kt)("li",{parentName:"ul"},"requires a ",(0,a.kt)("inlineCode",{parentName:"li"},"name")," prop with the name of the field;"),(0,a.kt)("li",{parentName:"ul"},"requires ",(0,a.kt)("inlineCode",{parentName:"li"},"children")," prop to be a function the receives as input the ",(0,a.kt)("inlineCode",{parentName:"li"},"field")," instance (exactly the same returned by ",(0,a.kt)("inlineCode",{parentName:"li"},"useField"),");"),(0,a.kt)("li",{parentName:"ul"},"uses the FormContext created by ",(0,a.kt)("inlineCode",{parentName:"li"},"<Form />")," to understand which form instance it belongs to.")),(0,a.kt)("h2",{id:"custom-input-component"},"Custom Input component"),(0,a.kt)("p",null,"Thanks to the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Field />")," component, it's easy to create a custom input:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"{5-9,11-21,27,38-39}","{5-9,11-21,27,38-39}":!0},'import React from "react"\nimport { observer } from "mobx-react-lite"\nimport { Field, useForm } from "@mozartspa/mobx-form"\n\ntype InputProps = {\n  name: string\n  label?: string\n  type?: string\n}\n\nconst Input = ({ name, label, type }: InputProps) => (\n  <Field name={name}>\n    {(field) => (\n      <div>\n        <label>{label}</label>\n        <input type={type} {...field.input} />\n        {field.isTouched && field.error}\n      </div>\n    )}\n  </Field>\n)\n\nconst App = observer(() => {\n  const form = useForm({\n    initialValues: {\n      name: "",\n      age: 36,\n    },\n    onSubmit: (values) => {\n      console.log("submitted values", values)\n    },\n  })\n\n  const { Form } = form\n\n  return (\n    <Form>\n      <Input name="name" label="Your name" />\n      <Input name="age" type="number" label="Your age" />\n      <button type="submit">Submit</button>\n    </Form>\n  )\n})\n\nexport default App\n')),(0,a.kt)("p",null,"Here we have also added an ",(0,a.kt)("inlineCode",{parentName:"p"},"age")," field of type ",(0,a.kt)("inlineCode",{parentName:"p"},"number"),". The conversion between ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"number")," is automatically managed by the library, because our custom input supports a ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," prop that we specified to be ",(0,a.kt)("inlineCode",{parentName:"p"},"number")," for the field ",(0,a.kt)("inlineCode",{parentName:"p"},"age"),". In this way, it will be rendered as ",(0,a.kt)("inlineCode",{parentName:"p"},'<input type="number" value="36" name="age" />')," in the HTML, letting the library to understand that the value should be converted to a number while updating the form values."),(0,a.kt)("h3",{id:"using-usefield"},"Using ",(0,a.kt)("inlineCode",{parentName:"h3"},"useField")),(0,a.kt)("p",null,"The custom component can be written using only the ",(0,a.kt)("inlineCode",{parentName:"p"},"useField")," hook. Remember: ",(0,a.kt)("inlineCode",{parentName:"p"},"<Field />")," is just a thin wrapper around ",(0,a.kt)("inlineCode",{parentName:"p"},"useField"),". Let's change it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"{11-21}","{11-21}":!0},'import React from "react"\nimport { observer } from "mobx-react-lite"\nimport { useField, useForm } from "@mozartspa/mobx-form"\n\ntype InputProps = {\n  name: string\n  label?: string\n  type?: string\n}\n\nconst Input = observer(({ name, label, type }: InputProps) => {\n  const field = useField(name)\n\n  return (\n    <div>\n      <label>{label}</label>\n      <input type={type} {...field.input} />\n      {field.isTouched && field.error}\n    </div>\n  )\n})\n\nconst App = observer(() => {\n  const form = useForm({\n    initialValues: {\n      name: "",\n      age: 36,\n    },\n    onSubmit: (values) => {\n      console.log("submitted values", values)\n    },\n  })\n\n  const { Form } = form\n\n  return (\n    <Form>\n      <Input name="name" label="Your name" />\n      <Input name="age" type="number" label="Your age" />\n      <button type="submit">Submit</button>\n    </Form>\n  )\n})\n\nexport default App\n')),(0,a.kt)("p",null,"Few things to note:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Our custom component is wrapped with ",(0,a.kt)("inlineCode",{parentName:"li"},"observer()"),", because we're accessing directly the values of ",(0,a.kt)("inlineCode",{parentName:"li"},"field"),", and they are MobX observables. Without it, our component would not re-render every time something changes."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"<Field />")," component didn't need the ",(0,a.kt)("inlineCode",{parentName:"li"},"observer()")," wrapper, because under the hood it was already using it."),(0,a.kt)("li",{parentName:"ul"},"We didn't pass the ",(0,a.kt)("inlineCode",{parentName:"li"},"form")," instance to the ",(0,a.kt)("inlineCode",{parentName:"li"},"useField")," hook. Because, if not explicitely set, ",(0,a.kt)("inlineCode",{parentName:"li"},"useField")," uses the React Context created by ",(0,a.kt)("inlineCode",{parentName:"li"},"<Form />")," to get access to the ",(0,a.kt)("inlineCode",{parentName:"li"},"form")," instance.")),(0,a.kt)("h3",{id:"using-splitfieldprops"},"Using ",(0,a.kt)("inlineCode",{parentName:"h3"},"splitFieldProps")),(0,a.kt)("p",null,"In the previous example, our custom input component accepts only 3 props: ",(0,a.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"label")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"type"),". It's enough in this case, because we are not using any option that ",(0,a.kt)("inlineCode",{parentName:"p"},"useField()")," (or ",(0,a.kt)("inlineCode",{parentName:"p"},"<Field />"),") can receive. Indeed ",(0,a.kt)("inlineCode",{parentName:"p"},"useField()")," accepts, as second argument, a long list of options, many of them about validation (see ",(0,a.kt)("a",{parentName:"p",href:"../api/useField"},"useField API reference")," for more details)."),(0,a.kt)("p",null,"In order to make our custom input component more versatile, we should make it accept a long list of options related to ",(0,a.kt)("inlineCode",{parentName:"p"},"useField"),", that our component will pass to ",(0,a.kt)("inlineCode",{parentName:"p"},"useField()"),". This is boring and error prone."),(0,a.kt)("p",null,"For this reason, we can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"splitFieldProps")," function which takes some props and splits them in:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name")," of the field"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"useField")," options"),(0,a.kt)("li",{parentName:"ul"},"other unknown props")),(0,a.kt)("p",null,"Here is how it should be used:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"{4-5,10,16-17,19}","{4-5,10,16-17,19}":!0},'import React from "react"\nimport { observer } from "mobx-react-lite"\nimport {\n  FieldComponentProps,\n  splitFieldProps,\n  useField,\n  useForm,\n} from "@mozartspa/mobx-form"\n\ntype InputProps = FieldComponentProps & {\n  label?: string\n  type?: string\n}\n\nconst Input = observer((props: InputProps) => {\n  const [name, fieldOptions, rest] = splitFieldProps(props)\n  const field = useField(name, fieldOptions)\n\n  const { label, type } = rest\n\n  return (\n    <div>\n      <label>{label}</label>\n      <input type={type} {...field.input} />\n      {field.isTouched && field.error}\n    </div>\n  )\n})\n\nconst App = observer(() => {\n  const form = useForm({\n    initialValues: {\n      name: "",\n      age: 36,\n    },\n    onSubmit: (values) => {\n      console.log("submitted values", values)\n    },\n  })\n\n  const { Form } = form\n\n  return (\n    <Form>\n      <Input name="name" label="Your name" />\n      <Input name="age" type="number" label="Your age" />\n      <button type="submit">Submit</button>\n    </Form>\n  )\n})\n\nexport default App\n')),(0,a.kt)("p",null,"Few things to note:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We updated the definition of ",(0,a.kt)("inlineCode",{parentName:"li"},"type InputProps")," merging it with ",(0,a.kt)("inlineCode",{parentName:"li"},"FieldComponentProps"),": it contains all the options that ",(0,a.kt)("inlineCode",{parentName:"li"},"useField")," can accept (",(0,a.kt)("inlineCode",{parentName:"li"},"name")," prop included)."),(0,a.kt)("li",{parentName:"ul"},"We use ",(0,a.kt)("inlineCode",{parentName:"li"},"splitFieldProps")," to split our props into ",(0,a.kt)("inlineCode",{parentName:"li"},"name"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"fieldOptions")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"rest"),"."),(0,a.kt)("li",{parentName:"ul"},"We pass ",(0,a.kt)("inlineCode",{parentName:"li"},"name")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"fieldOptions")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"useField()")),(0,a.kt)("li",{parentName:"ul"},"We extract from ",(0,a.kt)("inlineCode",{parentName:"li"},"rest")," the 2 specific props of our component: ",(0,a.kt)("inlineCode",{parentName:"li"},"label")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"type"),".")),(0,a.kt)("h2",{id:"debugging-the-state-of-the-form-instance"},"Debugging the state of the form instance"),(0,a.kt)("p",null,"During development it would be nice to know the internal state of our ",(0,a.kt)("inlineCode",{parentName:"p"},"form")," instance. For this reason, there is a ",(0,a.kt)("inlineCode",{parentName:"p"},"debug")," prop available on the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Form />")," component."),(0,a.kt)("p",null,"Let's apply it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"{37}","{37}":!0},'import React from "react"\nimport { observer } from "mobx-react-lite"\nimport { Field, useForm } from "@mozartspa/mobx-form"\n\ntype InputProps = {\n  name: string\n  label?: string\n  type?: string\n}\n\nconst Input = ({ name, label, type }: InputProps) => (\n  <Field name={name}>\n    {(field) => (\n      <div>\n        <label>{label}</label>\n        <input type={type} {...field.input} />\n        {field.isTouched && field.error}\n      </div>\n    )}\n  </Field>\n)\n\nconst App = observer(() => {\n  const form = useForm({\n    initialValues: {\n      name: "",\n      age: 36,\n    },\n    onSubmit: (values) => {\n      console.log("submitted values", values)\n    },\n  })\n\n  const { Form } = form\n\n  return (\n    <Form debug>\n      <Input name="name" label="Your name" />\n      <Input name="age" type="number" label="Your age" />\n      <button type="submit">Submit</button>\n    </Form>\n  )\n})\n\nexport default App\n')),(0,a.kt)("p",null,"If you ",(0,a.kt)("strong",{parentName:"p"},"run the code")," and edit the age field (setting it to ",(0,a.kt)("inlineCode",{parentName:"p"},"40")," for example), you should see something like this below the form:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "values": {\n    "name": "",\n    "age": 40\n  },\n  "errors": {},\n  "touched": {\n    "age": true\n  },\n  "isDirty": true,\n  "isValid": true,\n  "isValidating": false,\n  "isSubmitting": false\n}\n')),(0,a.kt)("p",null,"This is the state of our form, exposed by our ",(0,a.kt)("inlineCode",{parentName:"p"},"form")," instance. ",(0,a.kt)("inlineCode",{parentName:"p"},"age")," is actually a number (it does not have double quotes). Great!"),(0,a.kt)("p",null,"Another thing: have you noticed that ",(0,a.kt)("inlineCode",{parentName:"p"},'"touched"')," object? It contains the field names that triggered an ",(0,a.kt)("inlineCode",{parentName:"p"},"onBlur")," event. It's a useful information in order to display the field error only when the user already interacted with the input. More on this in the ",(0,a.kt)("a",{parentName:"p",href:"validation"},"Validation")," section."))}u.isMDXComponent=!0}}]);