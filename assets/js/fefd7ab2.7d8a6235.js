(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[360],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return d},kt:function(){return u}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),p=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(t),u=r,f=c["".concat(o,".").concat(u)]||c[u]||m[u]||i;return t?a.createElement(f,l(l({ref:n},d),{},{components:t})):a.createElement(f,l({ref:n},d))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=c;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8251:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},metadata:function(){return o},toc:function(){return p},default:function(){return m}});var a=t(2122),r=t(9756),i=(t(7294),t(3905)),l=["components"],s={sidebar_position:2},o={unversionedId:"getting-started/nested-array-fields",id:"getting-started/nested-array-fields",isDocsHomePage:!1,title:"Nested and array fields",description:"A good form library should adapt to the shape of your data structure, not viceversa. And this is no exception.",source:"@site/docs/getting-started/nested-array-fields.md",sourceDirName:"getting-started",slug:"/getting-started/nested-array-fields",permalink:"/mobx-form/docs/getting-started/nested-array-fields",editUrl:"https://github.com/mozartspa/mobx-form/edit/master/website/docs/getting-started/nested-array-fields.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Create a Form",permalink:"/mobx-form/docs/getting-started/create-form"},next:{title:"Validation",permalink:"/mobx-form/docs/getting-started/validation"}},p=[{value:"Nested fields",id:"nested-fields",children:[]},{value:"Array fields",id:"array-fields",children:[{value:"<code>&lt;FieldArray/&gt;</code>",id:"fieldarray",children:[]},{value:"useFieldArray",id:"usefieldarray",children:[]}]},{value:"FieldScope",id:"fieldscope",children:[]}],d={toc:p};function m(e){var n=e.components,t=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A good form library should adapt to the shape of your data structure, not viceversa. And this is no exception."),(0,i.kt)("h2",{id:"nested-fields"},"Nested fields"),(0,i.kt)("p",null,"Let's take a form data structure with nested fields (and deeply nested fields):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"{4-12}","{4-12}":!0},'const initialValues = {\n  name: "",\n  age: 36,\n  preferences: {\n    color: "blue",\n    dish: "pizza",\n    place: {\n      street: "",\n      city: "",\n      state: "",\n    },\n  },\n}\n')),(0,i.kt)("p",null,"We can reference these fields using the ",(0,i.kt)("strong",{parentName:"p"},"dot notation"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"preferences.color")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"preferences.dish")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"preferences.place.street")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"preferences.place.city")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"preferences.place.state"))),(0,i.kt)("p",null,"Here is the complete example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"{49-53}","{49-53}":!0},'import React from "react"\nimport { observer } from "mobx-react-lite"\nimport { Field, useForm } from "@mozartspa/mobx-form"\n\ntype InputProps = {\n  name: string\n  label?: string\n  type?: string\n}\n\nconst Input = ({ name, label, type }: InputProps) => (\n  <Field name={name}>\n    {(field) => (\n      <div>\n        <label>{label || name}</label>\n        <input type={type} {...field.input} />\n        {field.isTouched && field.error}\n      </div>\n    )}\n  </Field>\n)\n\nconst App = observer(() => {\n  const form = useForm({\n    initialValues: {\n      name: "",\n      age: 36,\n      preferences: {\n        color: "blue",\n        dish: "pizza",\n        place: {\n          street: "",\n          city: "",\n          state: "",\n        },\n      },\n    },\n    onSubmit: (values) => {\n      console.log("submitted values", values)\n    },\n  })\n\n  const { Form } = form\n\n  return (\n    <Form debug>\n      <Input name="name" />\n      <Input name="age" type="number" />\n      <Input name="preferences.color" />\n      <Input name="preferences.dish" />\n      <Input name="preferences.place.street" />\n      <Input name="preferences.place.city" />\n      <Input name="preferences.place.state" />\n      <button type="submit">Submit</button>\n    </Form>\n  )\n})\n\nexport default App\n')),(0,i.kt)("h2",{id:"array-fields"},"Array fields"),(0,i.kt)("p",null,"In case you have arrays in your data structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"{3-13}","{3-13}":!0},'const initialValues = {\n  preferences: {\n    dishes: ["pizza", "pasta"],\n    places: [\n      {\n        street: "City Life",\n        city: "Milan, Italy",\n      },\n      {\n        street: "Carrer del Moll",\n        city: "Palma, Mallorca, Spain",\n      },\n    ],\n  },\n}\n')),(0,i.kt)("p",null,"You can also use the ",(0,i.kt)("strong",{parentName:"p"},"dot notation"),", with a ",(0,i.kt)("strong",{parentName:"p"},"number")," as key:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"preferences.dishes.0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"preferences.dishes.1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"preferences.places.0.street")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"preferences.places.0.city")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"preferences.places.1.street")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"preferences.places.1.city"))),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Other form libraries supports the dot notation with brackets. This is ",(0,i.kt)("strong",{parentName:"p"},"not supported"),":"),(0,i.kt)("p",{parentName:"div"},(0,i.kt)("inlineCode",{parentName:"p"},"preferences.dishes[0]")," \u274c incorrect"),(0,i.kt)("p",{parentName:"div"},(0,i.kt)("inlineCode",{parentName:"p"},"preferences.dishes.0")," \u2705 correct"))),(0,i.kt)("h3",{id:"fieldarray"},(0,i.kt)("inlineCode",{parentName:"h3"},"<FieldArray/>")),(0,i.kt)("p",null,"If you have arrays, probably you want the user to be able to add or remove items. To make your life easier, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"<FieldArray/>")," component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"{1,31-60}","{1,31-60}":!0},'import { Field, FieldArray, useForm } from "@mozartspa/mobx-form"\n\n// ...\n\nconst App = observer(() => {\n  const form = useForm({\n    initialValues: {\n      preferences: {\n        dishes: ["pizza", "pasta"],\n        places: [\n          {\n            street: "City Life",\n            city: "Milan, Italy",\n          },\n          {\n            street: "Carrer del Moll",\n            city: "Palma, Mallorca, Spain",\n          },\n        ],\n      },\n    },\n    onSubmit: (values) => {\n      console.log("submitted values", values)\n    },\n  })\n\n  const { Form } = form\n\n  return (\n    <Form>\n      <FieldArray name="preferences.dishes">\n        {(fields) => (\n          <div>\n            {fields.names.map((name, index) => (\n              <Input key={index} name={name} />\n            ))}\n            <button type="button" onClick={() => fields.push("")}>\n              Add dish\n            </button>\n          </div>\n        )}\n      </FieldArray>\n      <FieldArray name="preferences.places">\n        {(fields) => (\n          <div>\n            {fields.names.map((name, index) => (\n              <div key={index}>\n                <Input name={`${name}.street`} />\n                <Input name={`${name}.city`} />\n              </div>\n            ))}\n            <button\n              type="button"\n              onClick={() => fields.push({ street: "", city: "" })}\n            >\n              Add place\n            </button>\n          </div>\n        )}\n      </FieldArray>\n      <button type="submit">Submit</button>\n    </Form>\n  )\n})\n\nexport default App\n')),(0,i.kt)("p",null,"Few things to note:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"<FieldArray/>")," is very similar to ",(0,i.kt)("inlineCode",{parentName:"li"},"<Field/>"),", but it exposes useful properties to manage arrays."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fields.names")," is an array of field names; in the ",(0,i.kt)("em",{parentName:"li"},"dishes")," example: ",(0,i.kt)("inlineCode",{parentName:"li"},'["preferences.dishes.0", "preferences.dishes.1"]'),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fields.push()")," adds a new item to the array")),(0,i.kt)("h3",{id:"usefieldarray"},"useFieldArray"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"<FieldArray />")," is just a thin wrapper around its hook: ",(0,i.kt)("inlineCode",{parentName:"p"},"useFieldArray"),"."),(0,i.kt)("p",null,"The same example can be written with ",(0,i.kt)("inlineCode",{parentName:"p"},"useFieldArray"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"{1,27-28,34-55}","{1,27-28,34-55}":!0},'import { Field, useFieldArray, useForm } from "@mozartspa/mobx-form"\n\n// ...\n\nconst App = observer(() => {\n  const form = useForm({\n    initialValues: {\n      preferences: {\n        dishes: ["pizza", "pasta"],\n        places: [\n          {\n            street: "City Life",\n            city: "Milan, Italy",\n          },\n          {\n            street: "Carrer del Moll",\n            city: "Palma, Mallorca, Spain",\n          },\n        ],\n      },\n    },\n    onSubmit: (values) => {\n      console.log("submitted values", values)\n    },\n  })\n\n  const dishesField = useFieldArray("preferences.dishes", { form })\n  const placesField = useFieldArray("preferences.places", { form })\n\n  const { Form } = form\n\n  return (\n    <Form debug>\n      <div>\n        {dishesField.names.map((name, index) => (\n          <Input key={index} name={name} />\n        ))}\n        <button type="button" onClick={() => dishesField.push("")}>\n          Add dish!\n        </button>\n      </div>\n      <div>\n        {placesField.names.map((name, index) => (\n          <div key={index}>\n            <Input name={`${name}.street`} />\n            <Input name={`${name}.city`} />\n          </div>\n        ))}\n        <button\n          type="button"\n          onClick={() => placesField.push({ street: "", city: "" })}\n        >\n          Add place\n        </button>\n      </div>\n      <button type="submit">Submit</button>\n    </Form>\n  )\n})\n\nexport default App\n')),(0,i.kt)("h2",{id:"fieldscope"},"FieldScope"),(0,i.kt)("p",null,"In the previous example we wrote:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"{4-5}","{4-5}":!0},"{\n  placesField.names.map((name, index) => (\n    <div key={index}>\n      <Input name={`${name}.street`} />\n      <Input name={`${name}.city`} />\n    </div>\n  ))\n}\n")),(0,i.kt)("p",null,"In this case we are concatenating the name of the array field (",(0,i.kt)("em",{parentName:"p"},'"preferences.places.0"'),", ",(0,i.kt)("em",{parentName:"p"},'"preferences.places.1"'),", ",(0,i.kt)("em",{parentName:"p"},"..."),") with the name of the subfields (",(0,i.kt)("em",{parentName:"p"},'"street"')," and ",(0,i.kt)("em",{parentName:"p"},'"city"'),"). To avoid this, we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"<FieldScope />")," component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"{4-7}","{4-7}":!0},'{\n  placesField.names.map((name, index) => (\n    <div key={index}>\n      <FieldScope name={name}>\n        <Input name="street" />\n        <Input name="city" />\n      </FieldScope>\n    </div>\n  ))\n}\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"<FieldScope />")," is very useful when you have an entire component that manages a subset of your form, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"{1-6,13}","{1-6,13}":!0},'const PlaceInput = ({ name }) => (\n  <FieldScope name={name}>\n    <Input name="street" />\n    <Input name="city" />\n  </FieldScope>\n)\n\n// ...\n\n// then, in your form:\n\n{\n  placesField.names.map((name, index) => <PlaceInput key={index} name={name} />)\n}\n')))}m.isMDXComponent=!0}}]);